using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Edits an existing proxy server for network requests. Can be called before authorization
        /// </summary>
        public class EditProxy : Function<Proxy>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "editProxy";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Proxy identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("proxy_id")]
            public int ProxyId { get; set; }

            /// <summary>
            /// Proxy server IP address
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("server")]
            public string Server { get; set; }

            /// <summary>
            /// Proxy server port
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("port")]
            public int Port { get; set; }

            /// <summary>
            /// True, if the proxy should be enabled
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("enable")]
            public bool Enable { get; set; }

            /// <summary>
            /// Proxy type
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("type")]
            public ProxyType Type { get; set; }
        }

        /// <summary>
        /// Edits an existing proxy server for network requests. Can be called before authorization
        /// </summary>
        public static Task<Proxy> EditProxyAsync(
            this Client client, int proxyId = default, string server = default, int port = default,
            bool enable = default, ProxyType type = default)
        {
            return client.ExecuteAsync(new EditProxy
            {
                ProxyId = proxyId, Server = server, Port = port, Enable = enable, Type = type
            });
        }
    }
}