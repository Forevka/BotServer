using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Writes a part of a generated file. This method is intended to be used only if the application has no direct access to TDLib's file system, because it is usually slower than a direct write to the destination file
        /// </summary>
        public class WriteGeneratedFilePart : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "writeGeneratedFilePart";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The identifier of the generation process
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("generation_id")]
            public long GenerationId { get; set; }

            /// <summary>
            /// The offset from which to write the data to the file
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset")]
            public int Offset { get; set; }

            /// <summary>
            /// The data to write
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("data")]
            public byte[] Data { get; set; }
        }

        /// <summary>
        /// Writes a part of a generated file. This method is intended to be used only if the application has no direct access to TDLib's file system, because it is usually slower than a direct write to the destination file
        /// </summary>
        public static Task<Ok> WriteGeneratedFilePartAsync(
            this Client client, long generationId = default, int offset = default, byte[] data = default)
        {
            return client.ExecuteAsync(new WriteGeneratedFilePart
            {
                GenerationId = generationId, Offset = offset, Data = data
            });
        }
    }
}