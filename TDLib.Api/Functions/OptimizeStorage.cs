using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Optimizes storage usage, i.e. deletes some files and returns new storage usage statistics. Secret thumbnails can't be deleted
        /// </summary>
        public class OptimizeStorage : Function<StorageStatistics>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "optimizeStorage";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Limit on the total size of files after deletion. Pass -1 to use the default limit
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("size")]
            public long Size { get; set; }

            /// <summary>
            /// Limit on the time that has passed since the last time a file was accessed (or creation time for some filesystems). Pass -1 to use the default limit
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("ttl")]
            public int Ttl { get; set; }

            /// <summary>
            /// Limit on the total count of files after deletion. Pass -1 to use the default limit
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("count")]
            public int Count { get; set; }

            /// <summary>
            /// The amount of time after the creation of a file during which it can't be deleted, in seconds. Pass -1 to use the default value
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("immunity_delay")]
            public int ImmunityDelay { get; set; }

            /// <summary>
            /// If not empty, only files with the given type(s) are considered. By default, all types except thumbnails, profile photos, stickers and wallpapers are deleted
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("file_types")]
            public FileType[] FileTypes { get; set; }

            /// <summary>
            /// If not empty, only files from the given chats are considered. Use 0 as chat identifier to delete files not belonging to any chat (e.g., profile photos)
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_ids")]
            public long[] ChatIds { get; set; }

            /// <summary>
            /// If not empty, files from the given chats are excluded. Use 0 as chat identifier to exclude all files not belonging to any chat (e.g., profile photos)
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("exclude_chat_ids")]
            public long[] ExcludeChatIds { get; set; }

            /// <summary>
            /// Pass true if statistics about the files that were deleted must be returned instead of the whole storage usage statistics. Affects only returned statistics
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("return_deleted_file_statistics")]
            public bool ReturnDeletedFileStatistics { get; set; }

            /// <summary>
            /// Same as in getStorageStatistics. Affects only returned statistics
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_limit")]
            public int ChatLimit { get; set; }
        }

        /// <summary>
        /// Optimizes storage usage, i.e. deletes some files and returns new storage usage statistics. Secret thumbnails can't be deleted
        /// </summary>
        public static Task<StorageStatistics> OptimizeStorageAsync(
            this Client client, long size = default, int ttl = default, int count = default,
            int immunityDelay = default, FileType[] fileTypes = default, long[] chatIds = default,
            long[] excludeChatIds = default, bool returnDeletedFileStatistics = default, int chatLimit = default)
        {
            return client.ExecuteAsync(new OptimizeStorage
            {
                Size = size, Ttl = ttl, Count = count, ImmunityDelay = immunityDelay, FileTypes = fileTypes,
                ChatIds = chatIds, ExcludeChatIds = excludeChatIds,
                ReturnDeletedFileStatistics = returnDeletedFileStatistics, ChatLimit = chatLimit
            });
        }
    }
}