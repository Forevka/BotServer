using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Joins a group call
        /// </summary>
        public class JoinGroupCall : Function<GroupCallJoinResponse>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "joinGroupCall";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Group call identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("group_call_id")]
            public int GroupCallId { get; set; }

            /// <summary>
            /// Group join payload, received from tgcalls. Use null to cancel previous joinGroupCall request
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("payload")]
            public GroupCallPayload Payload { get; set; }

            /// <summary>
            /// Caller synchronization source identifier; received from tgcalls
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("source")]
            public int Source { get; set; }

            /// <summary>
            /// True, if the user's microphone is muted
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_muted")]
            public bool IsMuted { get; set; }
        }

        /// <summary>
        /// Joins a group call
        /// </summary>
        public static Task<GroupCallJoinResponse> JoinGroupCallAsync(
            this Client client, int groupCallId = default, GroupCallPayload payload = default, int source = default,
            bool isMuted = default)
        {
            return client.ExecuteAsync(new JoinGroupCall
            {
                GroupCallId = groupCallId, Payload = payload, Source = source, IsMuted = isMuted
            });
        }
    }
}