using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class MessageContent : Object
        {
            /// <summary>
            /// A dice message. The dice value is randomly generated by the server
            /// </summary>
            public class MessageDice : MessageContent
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "messageDice";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// The animated stickers with the initial dice animation; may be null if unknown. updateMessageContent will be sent when the sticker became known
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("initial_state")]
                public DiceStickers InitialState { get; set; }

                /// <summary>
                /// The animated stickers with the final dice animation; may be null if unknown. updateMessageContent will be sent when the sticker became known
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("final_state")]
                public DiceStickers FinalState { get; set; }

                /// <summary>
                /// Emoji on which the dice throw animation is based
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("emoji")]
                public string Emoji { get; set; }

                /// <summary>
                /// The dice value. If the value is 0, the dice don't have final state yet
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("value")]
                public int Value { get; set; }

                /// <summary>
                /// Number of frame after which a success animation like a shower of confetti needs to be shown on updateMessageSendSucceeded
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("success_animation_frame_number")]
                public int SuccessAnimationFrameNumber { get; set; }
            }
        }
    }
}