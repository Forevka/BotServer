using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class InputInlineQueryResult : Object
        {
            /// <summary>
            /// Represents a single result of an inline query; for bots only
            /// </summary>
            public class InputInlineQueryResultAnimation : InputInlineQueryResult
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "inputInlineQueryResultAnimation";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// Unique identifier of the query result
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("id")]
                public string Id { get; set; }

                /// <summary>
                /// Title of the query result
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("title")]
                public string Title { get; set; }

                /// <summary>
                /// URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("thumbnail_url")]
                public string ThumbnailUrl { get; set; }

                /// <summary>
                /// MIME type of the video thumbnail. If non-empty, must be one of "image/jpeg", "image/gif" and "video/mp4"
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("thumbnail_mime_type")]
                public string ThumbnailMimeType { get; set; }

                /// <summary>
                /// The URL of the video file (file size must not exceed 1MB)
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("video_url")]
                public string VideoUrl { get; set; }

                /// <summary>
                /// MIME type of the video file. Must be one of "image/gif" and "video/mp4"
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("video_mime_type")]
                public string VideoMimeType { get; set; }

                /// <summary>
                /// Duration of the video, in seconds
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("video_duration")]
                public int VideoDuration { get; set; }

                /// <summary>
                /// Width of the video
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("video_width")]
                public int VideoWidth { get; set; }

                /// <summary>
                /// Height of the video
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("video_height")]
                public int VideoHeight { get; set; }

                /// <summary>
                /// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("reply_markup")]
                public ReplyMarkup ReplyMarkup { get; set; }

                /// <summary>
                /// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("input_message_content")]
                public InputMessageContent InputMessageContent { get; set; }
            }
        }
    }
}