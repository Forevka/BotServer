using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Describes a join response candidate for interaction with tgcalls
        /// </summary>
        public partial class GroupCallJoinResponseCandidate : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "groupCallJoinResponseCandidate";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Value of the field port
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("port")]
            public string Port { get; set; }

            /// <summary>
            /// Value of the field protocol
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("protocol")]
            public string Protocol { get; set; }

            /// <summary>
            /// Value of the field network
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("network")]
            public string Network { get; set; }

            /// <summary>
            /// Value of the field generation
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("generation")]
            public string Generation { get; set; }

            /// <summary>
            /// Value of the field id
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("id")]
            public string Id { get; set; }

            /// <summary>
            /// Value of the field component
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("component")]
            public string Component { get; set; }

            /// <summary>
            /// Value of the field foundation
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("foundation")]
            public string Foundation { get; set; }

            /// <summary>
            /// Value of the field priority
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("priority")]
            public string Priority { get; set; }

            /// <summary>
            /// Value of the field ip
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("ip")]
            public string Ip { get; set; }

            /// <summary>
            /// Value of the field type
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("type")]
            public string Type { get; set; }

            /// <summary>
            /// Value of the field tcp_type
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("tcp_type")]
            public string TcpType { get; set; }

            /// <summary>
            /// Value of the field rel_addr
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("rel_addr")]
            public string RelAddr { get; set; }

            /// <summary>
            /// Value of the field rel_port
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("rel_port")]
            public string RelPort { get; set; }
        }
    }
}