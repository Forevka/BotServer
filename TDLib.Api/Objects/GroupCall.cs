using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Describes a group call
        /// </summary>
        public partial class GroupCall : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "groupCall";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Group call identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("id")]
            public int Id { get; set; }

            /// <summary>
            /// True, if the call is active
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_active")]
            public bool IsActive { get; set; }

            /// <summary>
            /// True, if the call is joined
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_joined")]
            public bool IsJoined { get; set; }

            /// <summary>
            /// True, if user was kicked from the call because of network loss and the call needs to be rejoined
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("need_rejoin")]
            public bool NeedRejoin { get; set; }

            /// <summary>
            /// True, if the current user can unmute themself
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_unmute_self")]
            public bool CanUnmuteSelf { get; set; }

            /// <summary>
            /// True, if the current user can manage the group call
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_managed")]
            public bool CanBeManaged { get; set; }

            /// <summary>
            /// Number of participants in the group call
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("participant_count")]
            public int ParticipantCount { get; set; }

            /// <summary>
            /// True, if all group call participants are loaded
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("loaded_all_participants")]
            public bool LoadedAllParticipants { get; set; }

            /// <summary>
            /// Recently speaking users in the group call
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("recent_speakers")]
            public GroupCallRecentSpeaker[] RecentSpeakers { get; set; }

            /// <summary>
            /// True, if only group call administrators can unmute new participants
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("mute_new_participants")]
            public bool MuteNewParticipants { get; set; }

            /// <summary>
            /// True, if group call administrators can enable or disable mute_new_participants setting
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("allowed_change_mute_new_participants")]
            public bool AllowedChangeMuteNewParticipants { get; set; }

            /// <summary>
            /// Call duration; for ended calls only
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("duration")]
            public int Duration { get; set; }
        }
    }
}