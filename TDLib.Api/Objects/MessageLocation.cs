using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class MessageContent : Object
        {
            /// <summary>
            /// A message with a location
            /// </summary>
            public class MessageLocation : MessageContent
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "messageLocation";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// The location description
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("location")]
                public Location Location { get; set; }

                /// <summary>
                /// Time relative to the message send date, for which the location can be updated, in seconds
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("live_period")]
                public int LivePeriod { get; set; }

                /// <summary>
                /// Left time for which the location can be updated, in seconds. updateMessageContent is not sent when this field changes
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("expires_in")]
                public int ExpiresIn { get; set; }

                /// <summary>
                /// For live locations, a direction in which the location moves, in degrees; 1-360. If 0 the direction is unknown
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("heading")]
                public int Heading { get; set; }

                /// <summary>
                /// For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000). 0 if the notification is disabled. Available only for the message sender
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("proximity_alert_radius")]
                public int ProximityAlertRadius { get; set; }
            }
        }
    }
}